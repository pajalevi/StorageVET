names(profroma)
dimnames(proforma)
# Is there a user constraint column? if so, fix it
"User Constraints Value" %in% dimnames(proforma)[[2]]
#Id min year
minyear = min(proforma$X1)
minyear
#Id min year
proforma$year = as.numeric(proforma$X1)
minyear = min(proforma$year)
minyear
min(proforma$year,na.rm=T)
profroma$projectyear = proforma$year - minyear
proforma$projectyear = proforma$year - minyear
proforma
minyear = min(proforma$year,na.rm=T)
proforma$projectyear = proforma$year - minyear
proforma
proforma$projectyear = min(proforma$year - minyear,0,na.rm=T)
proforma
proforma$projectyear = max(proforma$year - minyear,0,na.rm=T)
proforma
proforma$projectyear = proforma$year - minyear
proforma
proforma$UserConstraintValue = proforma$`User Constraints Value` * 1.06^proforma$projectyear
proforma
proforma
proforma$UserConstraintValue = max(proforma$`User Constraints Value`) * 1.06^proforma$projectyear
proforma
proforma$projectyear[is.na(proforma$projectyear)] = 0
# Is there a user constraint column? if so, fix it
if("User Constraints Value" %in% dimnames(proforma)[[2]]){
proforma$UserConstraintValue = max(proforma$`User Constraints Value`) * 1.06^proforma$projectyear
}
proforma
proforma = read_csv(paste0(resultsfolder, folders[1],'/pro_forma_runID',runIDs[i],".csv"))
#create project year index for calculations
proforma$year = as.numeric(proforma$X1)
minyear = min(proforma$year,na.rm=T)
proforma$projectyear = proforma$year - minyear
# Is there a user constraint column? if so, fix it
if("User Constraints Value" %in% dimnames(proforma)[[2]]){
proforma$UserConstraintValue = max(proforma$`User Constraints Value`) * 1.06^proforma$projectyear
}
# need to do this after user constraint calculation
proforma$projectyear[is.na(proforma$projectyear)] = 0
proforma
proforma = read_csv(paste0(resultsfolder, folders[1],'/pro_forma_runID',runIDs[i],".csv"))
#create project year index for calculations
proforma$year = as.numeric(proforma$X1)
minyear = min(proforma$year,na.rm=T)
proforma$projectyear = proforma$year - minyear
# Is there a user constraint column? if so, fix it
if("User Constraints Value" %in% dimnames(proforma)[[2]]){
proforma$`User Constraints Value`= max(proforma$`User Constraints Value`) * 1.06^proforma$projectyear
}
# need to do this after user constraint calculation
proforma$projectyear[is.na(proforma$projectyear)] = 0
proforma
dimnames(proforma)
# calculate NPV for each column
npvbyyear = select(proforma, -X1, -year, -`Yearly Net Value`)
npvbyyear
# calculate NPV for each column
npvbyyear = select(proforma, -X1, -year, -`Yearly Net Value`, -projectyear)
j=1
colname = dimnames(npvbyyear)[[2]][j]
colname
npbbyyear$colname
npvbyyear[,colname]
# calculate NPV for each column
npvbyyear = select(proforma, -X1, -year, -`Yearly Net Value`, -projectyear)
for(j in 1:ncol(npvbyyear)){
colname = dimnames(npvbyyear)[[2]][j]
npvbyyear[,colname] = proforma[,colname] /(1+discount^proforma[,'projectyear'])
}
discount = 0.1
for(j in 1:ncol(npvbyyear)){
colname = dimnames(npvbyyear)[[2]][j]
npvbyyear[,colname] = proforma[,colname] /(1+discount^proforma[,'projectyear'])
}
npvbyyear
proforma
(1+discount^proforma[,'projectyear'])
proforma[,'projectyear']
(1+discount)^proforma[,'projectyear'])
((1+discount)^proforma[,'projectyear'])
for(j in 1:ncol(npvbyyear)){
colname = dimnames(npvbyyear)[[2]][j]
npvbyyear[,colname] = proforma[,colname] /((1+discount)^proforma[,'projectyear'])
}
npvvyyear
npvbyyear
proforma
colSums(npvbyyear)
i=13
runIDs[i]
# find run folder
folders = list.files(resultsfolder, pattern = paste0("output_run",runIDs[i],"_"))
if(length(folders) != 1){stop("wrong number of output folders identified")}
# load pro-forma
proforma = read_csv(paste0(resultsfolder, folders[1],'/pro_forma_runID',runIDs[i],".csv"))
#create project year index for calculations
proforma$year = as.numeric(proforma$X1)
minyear = min(proforma$year,na.rm=T)
proforma$projectyear = proforma$year - minyear
# Is there a user constraint column? if so, fix it
if("User Constraints Value" %in% dimnames(proforma)[[2]]){
proforma$`User Constraints Value`= max(proforma$`User Constraints Value`) * 1.06^proforma$projectyear
}
# need to do this after user constraint calculation
proforma$projectyear[is.na(proforma$projectyear)] = 0
# calculate NPV for each column
npvbyyear = select(proforma, -X1, -year, -`Yearly Net Value`, -projectyear)
for(j in 1:ncol(npvbyyear)){
colname = dimnames(npvbyyear)[[2]][j]
npvbyyear[,colname] = proforma[,colname] /((1+discount)^proforma[,'projectyear'])
}
# sum and add to output framework
tot = colSums(npvbyyear)
tot
# sum and add to output framework
tot = colSums(npvbyyear,na.rm=T)
tot
npvbyyear
tot$total = sum(colSums(npvbyyear,na.rm=T))
tot
# sum and add to output framework
tot = colSums(npvbyyear,na.rm=T)
type(tot)
is.array(tot)
is.data.frame(tot)
is.vector(tot)
as.data.frame(tot)
as.array(tot)
# sum and add to output framework
tot = as.array(colSums(npvbyyear,na.rm=T))
is.array(tot)
tot$`DA ETS`
tot[,"DA ETS"]
tot["DA ETS"]
as.data.fram(as.array(tot))
as.data.frame(as.array(tot))
for(i in 1:length(runIDs)){
# find run folder
folders = list.files(resultsfolder, pattern = paste0("output_run",runIDs[i],"_"))
if(length(folders) != 1){stop("wrong number of output folders identified")}
# load pro-forma
proforma = read_csv(paste0(resultsfolder, folders[1],'/pro_forma_runID',runIDs[i],".csv"))
#create project year index for calculations
proforma$year = as.numeric(proforma$X1)
minyear = min(proforma$year,na.rm=T)
proforma$projectyear = proforma$year - minyear
# Is there a user constraint column? if so, fix it
if("User Constraints Value" %in% dimnames(proforma)[[2]]){
proforma$`User Constraints Value`= max(proforma$`User Constraints Value`) * 1.06^proforma$projectyear
}
# need to do this after user constraint calculation
proforma$projectyear[is.na(proforma$projectyear)] = 0
# calculate NPV for each column
npvbyyear = select(proforma, -X1, -year, -`Yearly Net Value`, -projectyear)
for(j in 1:ncol(npvbyyear)){
colname = dimnames(npvbyyear)[[2]][j]
npvbyyear[,colname] = proforma[,colname] /((1+discount)^proforma[,'projectyear'])
}
# sum and add to output framework
tot = as.array(colSums(npvbyyear,na.rm=T))
# add run name and total value to tot
# add NPV to output framework
if(i==1){
output = tot
} else {
rbind.fill(output, tot)
}
}
# iterate through desired runIDs and calculate proforma
library(tidyverse)
for(i in 1:length(runIDs)){
# find run folder
folders = list.files(resultsfolder, pattern = paste0("output_run",runIDs[i],"_"))
if(length(folders) != 1){stop("wrong number of output folders identified")}
# load pro-forma
proforma = read_csv(paste0(resultsfolder, folders[1],'/pro_forma_runID',runIDs[i],".csv"))
#create project year index for calculations
proforma$year = as.numeric(proforma$X1)
minyear = min(proforma$year,na.rm=T)
proforma$projectyear = proforma$year - minyear
# Is there a user constraint column? if so, fix it
if("User Constraints Value" %in% dimnames(proforma)[[2]]){
proforma$`User Constraints Value`= max(proforma$`User Constraints Value`) * 1.06^proforma$projectyear
}
# need to do this after user constraint calculation
proforma$projectyear[is.na(proforma$projectyear)] = 0
# calculate NPV for each column
npvbyyear = select(proforma, -X1, -year, -`Yearly Net Value`, -projectyear)
for(j in 1:ncol(npvbyyear)){
colname = dimnames(npvbyyear)[[2]][j]
npvbyyear[,colname] = proforma[,colname] /((1+discount)^proforma[,'projectyear'])
}
# sum and add to output framework
tot = as.array(colSums(npvbyyear,na.rm=T))
# add run name and total value to tot
# add NPV to output framework
if(i==1){
output = tot
} else {
rbind.fill(output, tot)
}
}
# iterate through desired runIDs and calculate proforma
library(plyr)
for(i in 1:length(runIDs)){
# find run folder
folders = list.files(resultsfolder, pattern = paste0("output_run",runIDs[i],"_"))
if(length(folders) != 1){stop("wrong number of output folders identified")}
# load pro-forma
proforma = read_csv(paste0(resultsfolder, folders[1],'/pro_forma_runID',runIDs[i],".csv"))
#create project year index for calculations
proforma$year = as.numeric(proforma$X1)
minyear = min(proforma$year,na.rm=T)
proforma$projectyear = proforma$year - minyear
# Is there a user constraint column? if so, fix it
if("User Constraints Value" %in% dimnames(proforma)[[2]]){
proforma$`User Constraints Value`= max(proforma$`User Constraints Value`) * 1.06^proforma$projectyear
}
# need to do this after user constraint calculation
proforma$projectyear[is.na(proforma$projectyear)] = 0
# calculate NPV for each column
npvbyyear = select(proforma, -X1, -year, -`Yearly Net Value`, -projectyear)
for(j in 1:ncol(npvbyyear)){
colname = dimnames(npvbyyear)[[2]][j]
npvbyyear[,colname] = proforma[,colname] /((1+discount)^proforma[,'projectyear'])
}
# sum and add to output framework
tot = as.array(colSums(npvbyyear,na.rm=T))
# add run name and total value to tot
# add NPV to output framework
if(i==1){
output = tot
} else {
rbind.fill(output, tot)
}
}
as.data.fram(tot)
as.data.frame(tot)
enframe(tot)
pivot_wider(enframe(tot), values_from = value, names_from = name)
# sum and add to output framework
tot = colSums(npvbyyear,na.rm=T)
tot = pivot_wider(enframe(tot), values_from = value, names_from = name)
# add run name and total value to tot
tot$total = sum(tot[1,])
tot
i
i=13
if(length(folders) != 1){stop("wrong number of output folders identified")}
# load pro-forma
proforma = read_csv(paste0(resultsfolder, folders[1],'/pro_forma_runID',runIDs[i],".csv"))
#create project year index for calculations
proforma$year = as.numeric(proforma$X1)
minyear = min(proforma$year,na.rm=T)
proforma$projectyear = proforma$year - minyear
# Is there a user constraint column? if so, fix it
if("User Constraints Value" %in% dimnames(proforma)[[2]]){
proforma$`User Constraints Value`= max(proforma$`User Constraints Value`) * 1.06^proforma$projectyear
}
# need to do this after user constraint calculation
proforma$projectyear[is.na(proforma$projectyear)] = 0
# calculate NPV for each column
npvbyyear = select(proforma, -X1, -year, -`Yearly Net Value`, -projectyear)
for(j in 1:ncol(npvbyyear)){
colname = dimnames(npvbyyear)[[2]][j]
npvbyyear[,colname] = proforma[,colname] /((1+discount)^proforma[,'projectyear'])
}
# sum and add to output framework
tot = colSums(npvbyyear,na.rm=T)
tot = pivot_wider(enframe(tot), values_from = value, names_from = name)
# add run name and total value to tot
tot$total = sum(tot[1,])
folders = list.files(resultsfolder, pattern = paste0("output_run",runIDs[i],"_"))
if(length(folders) != 1){stop("wrong number of output folders identified")}
# load pro-forma
proforma = read_csv(paste0(resultsfolder, folders[1],'/pro_forma_runID',runIDs[i],".csv"))
#create project year index for calculations
proforma$year = as.numeric(proforma$X1)
minyear = min(proforma$year,na.rm=T)
proforma$projectyear = proforma$year - minyear
# Is there a user constraint column? if so, fix it
if("User Constraints Value" %in% dimnames(proforma)[[2]]){
proforma$`User Constraints Value`= max(proforma$`User Constraints Value`) * 1.06^proforma$projectyear
}
# need to do this after user constraint calculation
proforma$projectyear[is.na(proforma$projectyear)] = 0
# calculate NPV for each column
npvbyyear = select(proforma, -X1, -year, -`Yearly Net Value`, -projectyear)
for(j in 1:ncol(npvbyyear)){
colname = dimnames(npvbyyear)[[2]][j]
npvbyyear[,colname] = proforma[,colname] /((1+discount)^proforma[,'projectyear'])
}
# sum and add to output framework
tot = colSums(npvbyyear,na.rm=T)
tot = pivot_wider(enframe(tot), values_from = value, names_from = name)
# add run name and total value to tot
tot$total = sum(tot[1,])
tot
folders
for(i in 1:length(runIDs)){
# find run folder
folders = list.files(resultsfolder, pattern = paste0("output_run",runIDs[i],"_"))
if(length(folders) != 1){stop("wrong number of output folders identified")}
# load pro-forma
proforma = read_csv(paste0(resultsfolder, folders[1],'/pro_forma_runID',runIDs[i],".csv"))
#create project year index for calculations
proforma$year = as.numeric(proforma$X1)
minyear = min(proforma$year,na.rm=T)
proforma$projectyear = proforma$year - minyear
# Is there a user constraint column? if so, fix it
if("User Constraints Value" %in% dimnames(proforma)[[2]]){
proforma$`User Constraints Value`= max(proforma$`User Constraints Value`) * 1.06^proforma$projectyear
}
# need to do this after user constraint calculation
proforma$projectyear[is.na(proforma$projectyear)] = 0
# calculate NPV for each column
npvbyyear = select(proforma, -X1, -year, -`Yearly Net Value`, -projectyear)
for(j in 1:ncol(npvbyyear)){
colname = dimnames(npvbyyear)[[2]][j]
npvbyyear[,colname] = proforma[,colname] /((1+discount)^proforma[,'projectyear'])
}
# sum and add to output framework
tot = colSums(npvbyyear,na.rm=T)
tot = pivot_wider(enframe(tot), values_from = value, names_from = name)
# add run name and total value to tot
tot$total = sum(tot[1,])
tot$runID = runID[i]
tot$outputfol = folders[1]
# add NPV to output framework
if(i==1){
output = tot
} else {
rbind.fill(output, tot)
}
}
for(i in 1:length(runIDs)){
# find run folder
folders = list.files(resultsfolder, pattern = paste0("output_run",runIDs[i],"_"))
if(length(folders) != 1){stop("wrong number of output folders identified")}
# load pro-forma
proforma = read_csv(paste0(resultsfolder, folders[1],'/pro_forma_runID',runIDs[i],".csv"))
#create project year index for calculations
proforma$year = as.numeric(proforma$X1)
minyear = min(proforma$year,na.rm=T)
proforma$projectyear = proforma$year - minyear
# Is there a user constraint column? if so, fix it
if("User Constraints Value" %in% dimnames(proforma)[[2]]){
proforma$`User Constraints Value`= max(proforma$`User Constraints Value`) * 1.06^proforma$projectyear
}
# need to do this after user constraint calculation
proforma$projectyear[is.na(proforma$projectyear)] = 0
# calculate NPV for each column
npvbyyear = select(proforma, -X1, -year, -`Yearly Net Value`, -projectyear)
for(j in 1:ncol(npvbyyear)){
colname = dimnames(npvbyyear)[[2]][j]
npvbyyear[,colname] = proforma[,colname] /((1+discount)^proforma[,'projectyear'])
}
# sum and add to output framework
tot = colSums(npvbyyear,na.rm=T)
tot = pivot_wider(enframe(tot), values_from = value, names_from = name)
# add run name and total value to tot
tot$total = sum(tot[1,])
tot$runID = runIDs[i]
tot$outputfol = folders[1]
# add NPV to output framework
if(i==1){
output = tot
} else {
rbind.fill(output, tot)
}
}
i
for(i in 1:length(runIDs)){
# find run folder
folders = list.files(resultsfolder, pattern = paste0("output_run",runIDs[i],"_"))
if(length(folders) > 1){stop("too many output folders identified")
} else if(length(folders) ==0){
print(paste("run number", runIDs[i],"does not have an output folder and is skipped"))
next()
}
# load pro-forma
proforma = read_csv(paste0(resultsfolder, folders[1],'/pro_forma_runID',runIDs[i],".csv"))
#create project year index for calculations
proforma$year = as.numeric(proforma$X1)
minyear = min(proforma$year,na.rm=T)
proforma$projectyear = proforma$year - minyear
# Is there a user constraint column? if so, fix it
if("User Constraints Value" %in% dimnames(proforma)[[2]]){
proforma$`User Constraints Value`= max(proforma$`User Constraints Value`) * 1.06^proforma$projectyear
}
# need to do this after user constraint calculation
proforma$projectyear[is.na(proforma$projectyear)] = 0
# calculate NPV for each column
npvbyyear = select(proforma, -X1, -year, -`Yearly Net Value`, -projectyear)
for(j in 1:ncol(npvbyyear)){
colname = dimnames(npvbyyear)[[2]][j]
npvbyyear[,colname] = proforma[,colname] /((1+discount)^proforma[,'projectyear'])
}
# sum and add to output framework
tot = colSums(npvbyyear,na.rm=T)
tot = pivot_wider(enframe(tot), values_from = value, names_from = name)
# add run name and total value to tot
tot$total = sum(tot[1,])
tot$runID = runIDs[i]
tot$outputfol = folders[1]
# add NPV to output framework
if(i==1){
output = tot
} else {
rbind.fill(output, tot)
}
}
for(i in 1:length(runIDs)){
# find run folder
folders = list.files(resultsfolder, pattern = paste0("output_run",runIDs[i],"_"))
if(length(folders) > 1){stop("too many output folders identified")
} else if(length(folders) ==0){
print(paste("run number", runIDs[i],"does not have an output folder and is skipped"))
next()
}
# load pro-forma
proforma = read_csv(paste0(resultsfolder, folders[1],'/pro_forma_runID',runIDs[i],".csv"))
#create project year index for calculations
proforma$year = as.numeric(proforma$X1)
minyear = min(proforma$year,na.rm=T)
proforma$projectyear = proforma$year - minyear
# Is there a user constraint column? if so, fix it
if("User Constraints Value" %in% dimnames(proforma)[[2]]){
proforma$`User Constraints Value`= max(proforma$`User Constraints Value`) * 1.06^proforma$projectyear
}
# need to do this after user constraint calculation
proforma$projectyear[is.na(proforma$projectyear)] = 0
# calculate NPV for each column
npvbyyear = select(proforma, -X1, -year, -`Yearly Net Value`, -projectyear)
for(j in 1:ncol(npvbyyear)){
colname = dimnames(npvbyyear)[[2]][j]
npvbyyear[,colname] = proforma[,colname] /((1+discount)^proforma[,'projectyear'])
}
# sum and add to output framework
tot = colSums(npvbyyear,na.rm=T)
tot = pivot_wider(enframe(tot), values_from = value, names_from = name)
# add run name and total value to tot
tot$total = sum(tot[1,])
tot$runID = runIDs[i]
tot$outputfol = folders[1]
# add NPV to output framework
if(i==1){
output = tot
} else {
rbind.fill(output, tot)
}
}
i
output
warnings()
for(i in 1:length(runIDs)){
# find run folder
folders = list.files(resultsfolder, pattern = paste0("output_run",runIDs[i],"_"))
if(length(folders) > 1){stop("too many output folders identified")
} else if(length(folders) ==0){
print(paste("run number", runIDs[i],"does not have an output folder and is skipped"))
next()
}
# load pro-forma
if(!file.exists(paste0(resultsfolder, folders[1],'/pro_forma_runID',runIDs[i],".csv"))){
print(paste("run number", runIDs[i],"does not have a proforma and is skipped"))
next()
}
proforma = read_csv(paste0(resultsfolder, folders[1],'/pro_forma_runID',runIDs[i],".csv"))
#create project year index for calculations
proforma$year = as.numeric(proforma$X1)
minyear = min(proforma$year,na.rm=T)
proforma$projectyear = proforma$year - minyear
# Is there a user constraint column? if so, fix it
if("User Constraints Value" %in% dimnames(proforma)[[2]]){
proforma$`User Constraints Value`= max(proforma$`User Constraints Value`) * 1.06^proforma$projectyear
}
# need to do this after user constraint calculation
proforma$projectyear[is.na(proforma$projectyear)] = 0
# calculate NPV for each column
npvbyyear = select(proforma, -X1, -year, -`Yearly Net Value`, -projectyear)
for(j in 1:ncol(npvbyyear)){
colname = dimnames(npvbyyear)[[2]][j]
npvbyyear[,colname] = proforma[,colname] /((1+discount)^proforma[,'projectyear'])
}
# sum and add to output framework
tot = colSums(npvbyyear,na.rm=T)
tot = pivot_wider(enframe(tot), values_from = value, names_from = name)
# add run name and total value to tot
tot$total = sum(tot[1,])
tot$runID = runIDs[i]
tot$outputfol = folders[1]
# add NPV to output framework
if(i==1){
output = tot
} else {
output = rbind.fill(output, tot)
}
}
warnings()
output
output[5,]
write_csv(output,path = paste0(resultsfolder,"_npv_runs",min(runIDs),"-",max(runIDs),".csv"))
paste0(resultsfolder,"_npv_runs",min(runIDs),"-",max(runIDs),".csv")
write_csv(output,path = paste0(resultsfolder,"npv_runs",min(runIDs),"-",max(runIDs),".csv"))
